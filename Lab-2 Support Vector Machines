{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SD-TSIA 211 :  Lab 2 Séparateurs à Vaste Marge\n",
    "\n",
    "## Julie Keisler - Aurore Gosmant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part I - Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_breastcancer(filename):\n",
    "    \"\"\"\n",
    "    This function reads a file, for instance : \n",
    "    filename = 'wdbc_M1_B0.data'\n",
    "    It returns : \n",
    "    X : matrix of caracteristics\n",
    "    y : a vector of classes such as :\n",
    "        y[i] = 1, la tumeur est maligne, and if\n",
    "        y[i] = -1, la tumeur est benigne\n",
    "\n",
    "    For more information on the database : \n",
    "    https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Prognostic%29\n",
    "    \"\"\"\n",
    "\n",
    "    data = np.loadtxt(filename, delimiter=',')\n",
    "\n",
    "    # the column 0 doesn't interest us here\n",
    "    y = data[:, 1] * 2 - 1\n",
    "    X = data[:, 2:]\n",
    "\n",
    "    # Standardisation of the matrix\n",
    "    X = X - np.mean(X, axis=0)\n",
    "    X = X / np.std(X, axis=0)\n",
    "\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X,Y = load_breastcancer('wdbcM1B0.data')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part II - Subgradient method\n",
    "\n",
    "### Question 2.1\n",
    "\n",
    "Let's solve the following problem : \n",
    "$$\n",
    "\\min_{v \\in \\mathbb{R}^m, a \\in \\mathbb{R}, \\xi \\in \\mathbb{R}^n} \\frac{1}{2}  \\sum_{j = 1}^{m} v_{j}^{2} + c\\sum_{j = 1}^{n} \\xi_{i} \n",
    "$$ by showing it is equivalent to solving : \n",
    "\n",
    "$$  \\\\ min_{v \\in \\mathbb{R}^m} \\frac{1}{2}  \\sum_{j = 1}^{m} v_{j}^{2} + c\\sum_{j = 1}^{n} \\max(0, 1 - y_{i}(x_{i}^{T}v + a)). \\\\ $$\n",
    "\n",
    "\n",
    "Let's define the set $\\Xi (v,a) = [max(0, 1-y_i(x_i^{T} + a), +\\infty[ = \\prod_{i} \\Xi_{i}$\n",
    "\n",
    "Let $f(v,a,\\xi) = \\frac{1}{2} \\sum_{j=1}{m} v_j^{2} + c\\sum_{j=1}^{m}\\xi_{i}$\n",
    "\n",
    "Let $\\xi_{i} \\in \\Xi (v,a)$.\n",
    "\n",
    "f is an increasing function of $\\xi$ on $\\Xi (v,a)$.\n",
    "\n",
    "Let $\\xi_{min} = \\prod_{i} (max(0, 1-y_i(x_i^{T}v + a)).$\n",
    "\n",
    "We f have that  : $\\forall \\xi$ in $\\Xi : f(v,a,\\xi) \\ge f(v,a,\\xi_{min}). $ \n",
    "\n",
    "Because f is a function of multiple variables, therefore, we can deduce that :\n",
    "\n",
    "$\\forall \\xi$ in $\\Xi, : f(v,a,\\xi) \\le f(v,a,\\xi_{min})$\n",
    "\n",
    "The two problems are then equal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let $ h : \\mathbb{R} \\rightarrow \\mathbb{R}$ such that $h(z) = max(0, 1-z). $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def h(z):\n",
    "    return np.maximum(0, 1-z)\n",
    "\n",
    "x_axis = np.linspace(-5, 5)\n",
    "\n",
    "plt.plot(x_axis, h(x_axis), color='red', label = \"h(z) = max(0, 1-z)\")\n",
    "\n",
    "plt.plot([-5, 1], [-1, -1], color=\"blue\", label = \"derivative(h)\")\n",
    "plt.plot([1,5], [0, 0], color=\"blue\")\n",
    "\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We notice that h is derivative for all z except z=1. \n",
    "\n",
    "For $z!=1$, we have $\\delta h(z) = \\frac{\\delta h}{\\delta z}.$\n",
    "\n",
    "For $z=1$, we notice that all the slopes between -1 and 0 suit.\n",
    "\n",
    "Thus, we conlcude that : \n",
    "\n",
    "$$\n",
    "\\\\ \\delta h(z) = \\left\\{\n",
    "    \\begin{array}{ll}\n",
    "        -1 &\\mbox{if} & z < 1 \\\\\n",
    "        [-1, 0] &\\mbox{if} &z = 1 \\\\\n",
    "        0 &\\mbox{if} &z>1 \n",
    "    \\end{array}\n",
    "\\right.\n",
    "$$\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.3\n",
    "\n",
    "Let's set : $$\n",
    "f(v,a) = \\frac{1}{2}  \\sum_{j = 1}^{m} v_{j}^{2} + c\\sum_{j = 1}^{n} \\max(0, 1 - y_{i}(x_{i}^{T}v + a))\n",
    "$$\n",
    "\n",
    "We can write this function as a composition of a linear application M and two separable functions $N$ and $H$ such that : \n",
    "\n",
    "$$\n",
    "f(v,a) = N(v,a) + cH(M(v,a))\n",
    "$$\n",
    "\n",
    "According to the definition of a separable function, we have that : \n",
    "\n",
    "$$\n",
    "N(w) = \\sum_{j = 1}^{m} N_{j}(w_j) \\space \\space where \\space \\space w=(v,a)\\\\\n",
    "and \\space \\space N_j = \\frac{1}{2} v_{j}^{2}.\n",
    "$$\n",
    "\n",
    "Therefore : $N:(v,a)\\rightarrow \\frac{1}{2}  \\sum_{j = 1}^{m} v_{j}^{2}$.\n",
    "\n",
    "Using the same reasoning, we get that : \n",
    "\n",
    "$\n",
    "M = \n",
    "\\begin{pmatrix}\n",
    "y_1 &   &    \\\\\n",
    "      &...&\\\\\n",
    "    &    &  y_n\n",
    "\\end{pmatrix}\n",
    "$ x \n",
    "$ \\begin{pmatrix}\n",
    "    X^{T},\n",
    "\\begin{pmatrix}\n",
    "1\\\\\n",
    "..\\\\\n",
    "1\n",
    "\\end{pmatrix}\n",
    "\\end{pmatrix} $thereore we get : \n",
    "$\n",
    "M(v,a)\\rightarrow \\begin{pmatrix} y_{0}(x_{0}^{T}v + a) & ... & y_{0}(x_{0}^{T}v + a) \\end{pmatrix}\n",
    "$\n",
    "\n",
    "and $H:(x)\\rightarrow \\sum_{i = 1}^{n} h(x_i)$, with $h(m) = max(0, 1-m). $\n",
    "\n",
    "\n",
    "Let's define $f : \\mathbb{R}^{m}$ x $\\mathbb{R} \\rightarrow \\mathbb{R}$ and $g : \\mathbb{R}^{n} \\rightarrow \\mathbb{R}$.\n",
    "M is a linear operator $\\mathbb{R}^{m}$ x $\\mathbb{R}$ x $\\mathbb{R}^{n} \\rightarrow \\mathbb{R}^{n}$ \n",
    "\n",
    "\n",
    "\n",
    "The $\\textbf{proposition 4.2}$ states that if f and g be two convex functions, and M a linear operator.:\n",
    "$$\n",
    "\\delta f(x) + M^{T}\\delta g(x) \\subseteq \\delta ( f + goM)(x)\n",
    "$$\n",
    "\n",
    "\n",
    "Because we have that $dom(g) = \\mathbb{R}$, then according to the course, we can conclude that : \n",
    "\n",
    "$$\n",
    "\\delta f(v,a) = \\delta(N(v,a)) + cM^{T}\\delta M(v,a)\n",
    "$$\n",
    "\n",
    "Therefore :  \n",
    "\n",
    "$$\n",
    "\\\\delta(N(v,a)) = \\sum_{j = 1}^{m} v_j = (v,0)\n",
    "$$\n",
    "$$\n",
    "\\\\ \\delta M(v,a) = \\prod_{k=1}^n \\delta h(M_i(v,a)) = \\prod_{k=1}^n \\delta h(y_i(x_i^{T}v + a))  \n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = 1\n",
    "x = np.concatenate([X,np.ones((569,1))], axis=1) \n",
    "## addition of a column of ones on the first column of X\n",
    "\n",
    "M = np.diag(Y) @ x\n",
    "#the entry variable is a line vector whose first columns correspond to v, and the last one to a\n",
    "\n",
    "def N(va):\n",
    "    return 0.5 * np.sum(va[:-1]**2)\n",
    "\n",
    "def Hm(va):\n",
    "    return np.sum(h(M @ va))\n",
    "\n",
    "def f(va):\n",
    "    return N(va) + c*Hm(va)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def delta_N(va):\n",
    "    return np.concatenate([va[:-1], [0]])\n",
    "\n",
    "def delta_Hm(va):\n",
    "    return np.dot(x.T, (np.dot(M,va)>=1)- 1)\n",
    "\n",
    "def delta_f(va):\n",
    "    return delta_N(va) + c * delta_Hm(va)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.5 : Subgradient method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sub_grad_method(va0, N):\n",
    "    va_moy = np.zeros(va0.shape)\n",
    "    gamma_sum = 0\n",
    "    \n",
    "    for i in range(N):\n",
    "        gamma = 0.001/np.sqrt(i+1)\n",
    "        gamma_sum += gamma\n",
    "        va_moy += va0 * gamma\n",
    "        \n",
    "        va0 = va0 - gamma*delta_f(va0)\n",
    "    \n",
    "    return va_moy/gamma_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "569.0\n",
      "28.087767544895126\n"
     ]
    }
   ],
   "source": [
    "va0 = np.zeros((31,))\n",
    "print(f(va0))\n",
    "va_1 = sub_grad_method(va0, 100000)\n",
    "print(f(va_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part III -  Stochastic gradient method\n",
    "\n",
    "Let $f_i(v,a) = \\frac{1}{2} \\sum_{j = 1}^{m} v_j^{2} + cn max(0, 1 - y_i(x_i^{T}v + a))$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.1\n",
    "\n",
    "$I$ is a random variable that follows a uniform law on {1,...,n}.\n",
    "\n",
    "We have that : \n",
    "$$\n",
    "\\mathbb{E}[f_{I}(v,a)] = \\mathbb{E}[\\frac{1}{2} \\sum_{i = 1}^{m} v_j^{2}] + cn\\mathbb{E}[\\sum_{i = 1}^{n} max(0, 1 - y_i(x_i^{T}v + a))] \n",
    "\\\\ = \\frac{1}{2} \\sum_{i = 1}^{m} v_j^{2} + cn\\frac{1}{n}\\sum_{i = 1}^{n} \\mathbb{E}[max(0, 1 - y_i(x_i^{T}v + a)]\n",
    "$$\n",
    "Because the random variable is $I$, and $v$ and $a$ are fixed, we can conclude that : \n",
    "$$\n",
    "\\mathbb{E}[f_{I}(v,a)] = \\frac{1}{2} \\sum_{i = 1}^{m} v_j^{2} + c\\sum_{i = 1}^{n} max(0, 1 - y_i(x_i^{T}v + a)\n",
    "\\\\ = f(v,a)\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.2\n",
    "\n",
    "The function $f_{i}(v,a) = N(v,a) + cn$  x  $ h(M_i(v,a))$, where \n",
    "$M_i = y_i \n",
    "\\begin{pmatrix}\n",
    "x_i^{T} & 1\n",
    "\\end{pmatrix}\n",
    "$\n",
    "\n",
    "Therefore, the subdifferential of the function is : \n",
    "$\n",
    "\\delta f_{i}(v,a) = \\delta N(v,0) + cn$  x  $ M_i^{T}\\delta h(M_i(v,a))\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.3 : Stochastic gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "c=1\n",
    "\n",
    "def I_var():\n",
    "    return random.randint(0,n)\n",
    "\n",
    "def N(va):\n",
    "    sum = 0\n",
    "    for i in range(n-1):\n",
    "        sum+= va[i]\n",
    "    return sum/2        \n",
    "\n",
    "def M(i):\n",
    "    y_i = np.diag(Y)[i][i] #get the value of yi\n",
    "    x_i = X[:,i] #get the i-th column\n",
    "    X_i = np.concatenate([x_i,np.ones((569,1))], axis=1)\n",
    "    return y_i @ X_i.T \n",
    "\n",
    "def delta_fi(va, i):\n",
    "    m = M(i)\n",
    "    delta = N(va) + c*n*m.T*h(M(i))\n",
    "    \n",
    "    \n",
    "def stoch_grad_method(va0, N):\n",
    "    n = x.shape[0]\n",
    "    va_moy = np.zeros(va0.shape)\n",
    "    gamma_sum = 0\n",
    "    \n",
    "    for i in range(N):\n",
    "        I = np.random.randint(n)\n",
    "        gamma = 0.001/np.sqrt(i+1)\n",
    "        gamma_sum += gamma\n",
    "        va_moy += va0 * gamma\n",
    "        \n",
    "        va0 = va0 - gamma * delta_fi(va0,I)\n",
    "    \n",
    "    return va_moy/gamma_sum"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
